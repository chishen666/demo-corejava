一.继承概述
1.含义
    多个类存在相同属性和行为时,将这些内容抽取到单独一个类中,那么多个类无需再定义这些属性和行为,只要继承单独的那个类即可.
    多个类称为子类,单独这个类称为父类或超类.
    子类可以直接访问父类中的非私有的属性和行为.
    通过extends关键字让类与类之间产生继承关系.
    只有is a才是继承.
2.优点
    1)提高了代码的复用性
    2)让类与类之间产生关系,是多态的前提
    
二.聚集关系 has a
    聚合:班级由学生组成
    组合:人体由四肢等组成
    
三.父子类间成员变量的关系
            如果子类中出现非私有的同名成员变量时，
            子类要访问本类中的变量，用this
            子类要访问父类中的同名变量，用super。

    super的使用和this的使用几乎一致。
    this代表的是本类对象的引用。
    super代表的是父类对象的引用。
    
四.父子类间成员函数的关系
            当子类出现和父类一模一样的函数时，
            当子类对象调用该函数，会运行子类函数的内容。
            如同父类的函数被覆盖一样。

            这种情况是函数的另一个特性：重写(覆盖)

            当子类继承父类，沿袭了父类的功能，到子类中，
            但是子类虽具备该功能，但是功能的内容却和父类不一致，
            这时，没有必要定义新功能，而是使用覆盖特殊，保留父类的功能定义，并重写功能内容。

            覆盖：
    1，子类覆盖父类，必须保证子类权限大于等于父类权限，才可以覆盖，否则编译失败。
    2，静态只能覆盖静态。

            记住大家：
            重载：只看同名函数的参数列表。
            重写：子父类方法要一模一样。
            
五.父子类间构造函数的关系
            在对子类对象进行初始化时，父类的构造函数也会运行，
            那是因为子类的构造函数默认第一行有一条隐式的语句 super();
    super():会访问父类中空参数的构造函数。而且子类中所有的构造函数默认第一行都是super();

            为什么子类一定要访问父类中的构造函数。

            因为父类中的数据子类可以直接获取。所以子类对象在建立时，需要先查看父类是如何对这些数据进行初始化的。
            所以子类在对象初始化时，要先访问一下父类中的构造函数。
            如果要访问父类中指定的构造函数，可以通过手动定义super语句的方式来指定。

            注意：super语句一定定义在子类构造函数的第一行。

            子类的实例化过程。

            结论：
            子类的所有的构造函数，默认都会访问父类中空参数的构造函数。
            因为子类每一个构造函数内的第一行都有一句隐式super();

            当父类中没有空参数的构造函数时，子类必须手动通过super语句形式来指定要访问父类中的构造函数。

            当然：子类的构造函数第一行也可以手动指定this语句来访问本类中的构造函数。
            子类中至少会有一个构造函数会访问父类中的构造函数。

六.final关键字
            最终。作为一个修饰符，
    1)可以修饰类，函数，变量。
    2)被final修饰的类不可以被继承。为了避免被继承，被子类复写功能。
    3)被final修饰的方法不可以被复写。
    4)被final修饰的变量是一个常量只能赋值一次，既可以修饰成员变量，又可以修饰局部变量。
                 当在描述事物时，一些数据的出现值是固定的，那么这时为了增强阅读性，都给这些值起个名字。方便于阅读。
                 而这个值不需要改变，所以加上final修饰。作为常量：常量的书写规范所有字母都大写，如果由多个单词组成。
                 单词间通过_连接。
    5)内部类定义在类中的局部位置上是，只能访问该局部被final修饰的局部变量。
    
七.抽象类
            当多个类中出现相同功能，但是功能主体不同，
            这是可以进行向上抽取。这时，只抽取功能定义，而不抽取功能主体。
            
            抽象：看不懂。
            
            抽象类的特点：
            1，抽象方法一定在抽象类中。
            2，抽象方法和抽象类都必须被abstract关键字修饰。
            3，抽象类不可以用new创建对象。因为调用抽象方法没意义。
            4，抽象类中的抽象方法要被使用，必须由子类复写起所有的抽象方法后，建立子类对象调用。
                如果子类只覆盖了部分抽象方法，那么该子类还是一个抽象类。
            
            
            抽象类和一般类没有太大的不同。
            该如何描述事物，就如何描述事物，只不过，该事物出现了一些看不懂的东西。
            这些不确定的部分，也是该事物的功能，需要明确出现。但是无法定义主体。
            通过抽象方法来表示。
            
            抽象类比一般类多个了抽象函数。就是在类中可以定义抽象方法。
            抽象类不可以实例化。
            
            
            特殊：抽象类中可以不定义抽象方法，这样做仅仅是不让该类建立对象。
            
            
            练习：
            
            abstract 关键字，和哪些关键字不能共存。
            final：被final修饰的类不能有子类。而被abstract修饰的类一定是一个父类。
            private: 抽象类中的私有的抽象方法，不被子类所知，就无法被复写。
                    而抽象方法出现的就是需要被复写。
            static：如果static可以修饰抽象方法，那么连对象都省了，直接类名调用就可以了。
                    可是抽象方法运行没意义。
            
            抽象类中是否有构造函数？
            有，抽象类是一个父类，要给子类提供实例的初始化。
            
八.接口
            接口：初期理解，可以认为是一个特殊的抽象类
                当抽象类中的方法都是抽象的，那么该类可以通过接口的形式来表示。
            class用于定义类
            interface 用于定义接口。
            
            接口定义时，格式特点：
            1，接口中常见定义：常量，抽象方法。
            2，接口中的成员都有固定修饰符。
                常量：public static final
                方法：public abstract 
            记住：接口中的成员都是public的。
            
            
            接口：是不可以创建对象的，因为有抽象方法。
            需要被子类实现，子类对接口中的抽象方法全都覆盖后，子类才可以实例化。
            否则子类是一个抽象类。
            
            接口可以被类多实现，也是对多继承不支持的转换形式。java支持多实现。
            
1.接口的特点
    1).接口是对外暴露的规则
    2).接口是程序的扩展功能
    3).接口可以用来多实现
    
    
    
    
    
    
    
    
    
    