多态

编译时类型
可以认为是对象声明的数据类型,在编译时有效

运行时类型
指代对象真正的类型,也就是new运算符后的类型


多态的理解
1.对象的编译时类型决定了此对象可以访问的成员
2.对象的运行时类型决定了此对象真正的行为能力


多态的应用 -- 面向父类编程
1.对象的编译时类型尽可能写成父类
2.方法的参数尽可能写成父类
3.方法的返回类型尽可能写成父类


案例:设计一个方法,可以输出任意形状的面积
public void printArea(Circle c){
	System.out.println(c.area());
}
public void printArea(Square s){
	System.out.println(s.area());
}
以上两个方法构成方法的重载,但是由于Circle和Square都是Shape的子类,
所以,我们可以根据多态,只要设计一个方法就能完成此业务:

public void printArea(Shape s){
	System.out.println(s.area());
}
此方法不但能接受Circle和Square为参数,而且只要是Shape的子类,都能传入
此方法计算面积
----------------------------------------------------------------------

设计一个方法,可以根据参数来决定返回哪一个具体的实例

public Cilcle newInstance1(){
	return new Circle();
}
public Square newInstance2(){
	return new Square();
}
改写成:
public Shape newInstance(int type){
	if(type == 1){
		return new Circle();
	}else if(type == 2){
		return new Square();
	}else{
		System.out.println("参数不合法!");	
	}	
	return null;
}

以上就是Java23种设计模式之一:

简单工厂(Simple Factory)设计模式

作用:通过一个统一的方法来创建某一类的具体实例

什么时候使用:
做项目时,如果存在一个父类,并且子类数量>=2,则直接工厂创建对象

命名方式:
父类类名 + Factory

组成:
1.常量
2.公开静态的方法


如:API中java.util.Calendar类就是采用简单工厂设计模式,
   它里面的getInstance()方法可以是得调用者使用统一的
   此方法来获取不同日历对象
   Calendar cal = Calendar.getInstance();
   或者
   Calendar cal = new GregorianCalendar();
-------------------------------------------------------------------

面向对象的高级特性:
1.抽象
2.接口
-------------------------------------------------------------------

静态
关键字:static,它是一种修饰符

1.属性
  表示此属性是静态属性,也叫做类变量,它是所有对象所共享的,是类所拥有的.

  语法:
  在普通属性前加上static关键

  如:public static int i;//静态属性

  
  静态属性初始化的时机:
  静态属性在类加载的时候,就会分配空间并且赋初始值,而且只有一次,
  而普通属性只有当创建对象时才会分配空间并且赋值.


  静态属性的应用:产生唯一性自增Id

  
2.方法
  表示这个方法是静态方法
  
  特点:
  a.静态方法可以直接引用静态成员,不能直接引用非静态成员,需要创建对象
  b.静态成员可以通过类名.成员名调用,无需创建对象
  c.非静态方法可以直接调用任何成员,包括静态和非静态.

  应用:一般用在工具类中,方便调用

  如:java.lang.Math
     java.util.Arrays
     java.util.Collections
-----------------------------------------------------------------------
a.为什么静态方法中不能直接调用非静态成员?
答:因为静态方法在类加载的时候就出现了,此时对象还不存在;而所有的
   非静态成员都是对象所有拥有的,对象都还没有创建出来,自然不能调用.

b.如何在静态方法中调用非静态成员?
答:先创建对象,再通过对象来调用

c.为什么main方法是静态的?
答:因为main方法是程序的主入口,此方法是由JVM来调用的,此时对象还
   不存在,所以按照JVM规范,定义main方法是静态的

d.为什么不把所有的方法都定义成静态的?
答:因为静态成员在类加载的时候就会被加载进内存,如果所有成员都是静态
   的话,类一旦加载,就会消耗过多的资源,性能不高,而且大部分资源都是
   用不到的
-----------------------------------------------------------------------   
Java语言是一种动态加载(有需要的时候再加载)的编程语言,
这种机制使得Java编程语言可以具有,高性能,低消耗,高安全级别的特点. 

跨平台,面向对象(封装,继承,多态,抽象,接口),动态加载,高性能,
安全性,多线程,网络开发...
-----------------------------------------------------------------------

3.代码块

普通代码块:
{
	//代码块;
}


静态代码块:
static{
	//代码块;
}

特点:
a.只要一次创建对象,普通代码块就会被优先执行一次,所以一般我们不写
  普通代码块,因为它里面的代码可以移植到构造方法中.

b.静态代码块在类加载的时候就会被执行,而且只执行一次


静态代码块的作用:
根据静态代码块的特点,它适合做一些费时,费力,且消耗大量资源,但是只
需要被执行一次的工作.

如:建立数据库连接池,加载本地大型资源/配置文件...


4.静态导入:可以引入类中的静态成员
  import static com.corejava.day07.simplefactory.UsbDeviceFactory.*;
  
  作用就是导入目标类中所有的静态成员,成员包括属性或者方法 


5.内部类(静态内部类 Static Inner Class)[以后再说]
--------------------------------------------------------------------

类加载进JVM的活动过程:
1.JVM加载需要执行的类
2.给这个类的所有静态成员分配空间
3.初始化静态成员
4.调用静态代码块
5.如果创建对象,则:
  5-1 分配非静态的成员空间
  5-2 初始化非静态成员
  5-3 调用普通代码块[如果存在,一般不写]
  5-4 调用构造方法
--------------------------------------------------------------------

static静态关键字应用之单例设计模式(Singleton Pattern)

定义:就是指在应用程序中,某一个类的具体实例有且仅有一个

问题域:保证某一个类的具体实例在应用程序中有且仅有一个

解决方案:
1.构造方法私有化
2.提供类本身的唯一实例作为这个类的静态属性
3.提供一个公开的静态方法来返回这个唯一实例属性

如:
public class Singleton{
	private static Singleton instance = new Singleton();

	//如何保证构造方法不被外界调用(构造方法私有化)
	private Singleton(){}

	//既然外界不能直接调用构造来创建对象,那么在这个类中,就
	//应该提供一个对外公开的方法来返回本身的类型
	public static Singleton getInstance(){
		return instance;
	}
}
//创建Singleton对象
Singleton s = new Singleton();//error

Singleton s1 = Singleton.getInstance();//right
Singleton s2 = Singleton.getInstance();
System.out.println(s1 == s2);//true
------------------------------------------------------------------

Final关键字

1.局部变量
  表示这个局部变量是常量

  如:final int ROWS = 10;

  特点:
  a.创建常量后,在使用前要初始化
  b.一旦赋值,无法改变
  c.比字面量携带更多的信息,提高代码的可读性


2.属性
  表示这个属性是常量属性

  如:public static final int COLS = 20;

  特点:
  1.属性的声明和赋值要同时
  2.可以通过静态代码块给常量赋值

  在java.util.Calendar类中定义了大量的公开,静态的常量
  如:DAY_OF_WEEK
     DAY_OF_MONTH
     SUNDAY
     HOUR...


常量的作用:
比字面量携带更多的信息,提高代码的可读性
如:
DAY_OF_MONTH这个常量值是5
如果我们通过int date = cal.get(5);来获取月日,可读性相对很差,那么
使用常量,改写成int date = cal.get(Calendar.DAY_OF_MONTH);更有意义.

注意:我们一般在工厂类中/常量接口中自定义常量


3.方法
  表示这个方法不可以被重写


4.类
  表示这个类不能被继承
  