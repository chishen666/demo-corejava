JAVA IO流

作用:可以用来操作本地或者远程的文件内容
     支持对二进制文件或者字符文件的读,写操作

如何把操作系统中的文件/文件夹映射成JVM中的对象呢?
JDK中提供一个类:
java.io.File

注:File类的实例只能读取文件/文件夹本身的信息,而不能操作文件
   内容,如果要读,写文件的内容,请通过流(Stream)对象来操作.

构造方法:
public File(String filepath);
public File(String parent,String child);
public File(File parent,String child);

其他方法:
boolean isFile();//是否是文件
boolean isDirectory();//是否是目录
boolean isHidden();//是否是隐藏文件
boolean canWrite();//是否是可写入文件
boolean canRead();//是否可以读取文件

boolean createNewFile();//创建文件
boolean mkdir();//创建目录
boolean mkdirs();//创建目录结构
boolean delete();//删除文件或者目录(只能删除空文件夹)
void deleteOnExit();//当JVM进程结束后,再执行删除操作

boolean exists();//判断文件或者文件夹是否存在
long length();//得到文件大小,如果是目录,则返回值不确定

String getParent();//获取父目录的路径
File getParentFile();//获取父目录的File实例

String getPath();//得到路径字符串
String getAbsolutePath();//得到绝对路径的字符串
...

//把当前文件夹下所有的文件和文件夹的字符串信息存放到一个数组中
String[] list();

String[] list(FilenameFilter filter);//过滤器来过滤需要的文件

//把当前文件夹下所有的文件和文件夹的File实例存放到一个数组中
File[] listFiles();

File[] listFiles(FileNameFilter fnf);
...

----------------------------------------------------------
路径
分为相对路径和绝对路径
在windows中,如果没有以盘符打头的路径就是相对路径
如:temp/logs,day13/day13笔记.txt

如果以盘符打头的路径就是绝对路径
如:
F:\课程笔记\CoreJava\day13笔记.txt
C:\Program Files\QQ\QQ.exe
----------------------------------------------------------

IO流的分类
流(Stream),是指不停从源头向目标搬运着内容的一种特殊对象

源头:可以是文件,内存,网络,键盘...
目标:可以是文件,内存,网络,显示器...

按照流的类型分类:输入流(InputStream)和输出流(OutputStream)
输入:从外界读到JVM中
输出:从JVM中写出到外界

按照流的功能分为:字节流和字符流

由于不同的流有不同的功能,所以,JDK中有很多内置的类型
如:

1)字节输入流
java.io.InputStream			字节输入流 - 顶级抽象父类
 \ - ByteArrayInputStream	操作字节数组的输入流
 \ - FileInputStream		操作文件的输入流
 \ - ObjectInputStream		操作对象类型的输入流
 \ - FilterInputStream		输入过滤流
   \ - BufferedInputStream	带缓存的输入流
   \ - DataInputStream		操作基本类型的输入流

公共方法:
public int read();//读取单个字节(如果读取到-1,则表示读取完毕)
public int read(byte[] buf);//尝试读取buf.length个字节
//返回值表示实际读到的字节数,如果返回-1,表示读取完毕
public int read(byte[] buf,int off,int length);

public void close();//关闭流,释放资源

//注意:关闭的原则是,先打开的后关闭


2)字节输出流
java.io.OutputStream		字节输出流 - 顶级父类
 \ - ByteArrayOutputStream	操作字节数组的输出流
 \ - FileOutputStream		操作文件的输入流
 \ - ObjectOutputStream		操作对象类型的输出流
 \ - FilterOutputStream		输出过滤流
   \ - BufferedOutputStream	带缓存的输出流
   \ - DataOutputStream		操作基本类型的输出流

公共方法:
public void write(int b);//写入指定的单个字节
public void write(byte[] buf);//写入指定的buf.length字节
public void write(byte[] buf,int off,int length);
//写入指定的length个字节

public void close();//释放资源
---------------------------------------------------------
基本步骤:
1.定位好源头(一般是文件或者内存)或者定位好目标
2.根据源头来创建输入流或者根据目标来创建输出流
3.循环
  a)读取
  b)执行业务(复制,加密,搜索,拆分,合并...)
  c)写入
4.释放资源
---------------------------------------------------------
练习:
文件复制,把一个文件复制到另一个文件中
---------------------------------------------------------

Java IO流框架的设计思想
采用的是"装饰模式"[油漆工模式]

装饰模式的核心思想:把类划分成两个大类,一个类是基础类,
另一个类是拓展类.这两个类都继承于共同的抽象父类.

基础类我们叫做节点流,具备真正的读写数据的能力
拓展类我们叫做过滤流,只提供了拓展功能,本身不具备数据读写
能力,所以,要构建过滤流,必须以节点流来做为基础.

节点流:
ByteArrayInputStream/ByteArrayOutputStream
FileIntputStream/FileOutputStream

过滤流:
FilterInputStream/FilterOutputStream
DataInputStream/DataOutputStream
BufferedInputStream/BufferedOutputStream
ObjectInputStream/ObjectOutputStream

IO流这样设计,可以让我们任意组合各种过滤流和节点流,
形成功能更为强大的流.

如:
构建了一个带缓存功能的文件操作流
BufferedInputStream bis = new BufferedInputStream(
			new FileInputStream(filename));

构建一个读写基本类型的文件流
DataInputStream dis = new DataInputStream(
			new FileInputStream(filename));

构建一个读写对象类型的文件流
ObjectInputStream ois = new ObjectInputStream(
			new FileInputStream(filename));

构建一个既能读写对象类型,又带缓存的文件流
ObjectInputStream ois = new BufferedInputStream(
						new ObjectInputStream(
						new FileInputStream(filename)));

---------------------------------------------------------

读取对象类型[本质就是对象的序列化]

JAVA对象序列化的要求:
a)要求被序列化的对象必须实现java.io.Serializable标记接口
b)如果自定义类中有其他自定义类型的属性,则这个属性也要
  实现java.io.Serializable接口
c)如果要序列化一个集合对象,则要求集合中的所有元素都必须
  实现java.io.Serializable接口


瞬态关键字:transient
如果序列化的对象,不想持久化某一个或者多个属性,则可以使用
此关键字来修饰这个属性.

如:
public class Book{
	private long id;
	private String name;
	private transient String author;
	//author不会被持久化
}
---------------------------------------------------------

字符流,专门用来操作文本文件的
1)字符输入流
java.io.Reader			字符输入流的顶级抽象父类
  \- CharArrayReader	操作内存数据 - 字符数组
  \- FileReader			操作文本文件
  \- StringReader		操作内存数据 - 字符串
  \- BufferedReader		带缓存功能的字符流
  \- InputStreamReader	桥接器(把字节流转换成字符流)
  ...

公共方法:
public int read();//读取单个字符
public int read(char[] buf);
public int read(char[] buf,int off,int len);
public void close();

2)字符输出流
java.io.Writer	字符输出流的顶级抽象父类
  \- CharArrayWriter	
  \- FileWriter		
  \- StringWriter	
  \- BufferedWriter	
  \- OutputStreamWriter
  \- PrintWriter
  ...

公共方法:
public void write(int c);
public void write(char[] buf);
public void write(char[] buf,int off,int len);
public void close();
---------------------------------------------------------

不同流的特殊方法:
1.BufferedReader 
  方法:
  String readLine();

  构建一个BufferedReader来操作文件
  BufferedReader br = new BufferedReader(new FileReader(filepath));
  //读取整行
  String line = br.readLine();

2.PrintWriter
  方法:
  void println(String line);//写入一整行,再加换行符
  void pint(String line);//写入一整行,不加换行符

  flush();//手动刷新缓存

构建一个PrinterWriter来操作文件
PrinterWriter pw = new PrinterWriter(filename);
//不会自动刷新

//构建一个自动刷新的PrinterWriter来操作文件
PrinterWriter pw = new PrinterWriter(
		       new FileWriter(filename),true);

