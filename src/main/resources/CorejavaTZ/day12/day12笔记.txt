Java集合框架的其他细节问题

1.针对集合构建的问题

根据一个已知的集合来构建一个新集合

List<Integer> list1 = new ArrayList<>();
list1.add(100);
list1.add(200);
list1.add(300);
list1.add(400);

List<Integer> list2 = new ArrayList<>(list1);

此时,list2和list1是两个完全不同的集合,但是它们中的元素是相同的.

	
非结构性修改,修改元素本身,会对另一个集合产生影响的
list1.get(0).setName("Ann"); 
		
结构性修改,修改集合结构,不会对另一个集合产生影响.
add,remove,sort...
---------------------------------------------------------------------------

2.针对集合元素的删除

错误一:
删除元素时,如果两个要被删除的元素是相邻的,则可能出现第二个元素无法删除的情况,
原因是当删除第一个元素时,后面的元素自动向前移动,而下标继续向后移动,所以,第二个
要删除的元素没有被检测到

解决方案:
a.删除元素过后i--,让下标在原地停留一次等待检测
b.把for循环中的变量因子i++移动到没有删除元素的情况中
c.反向遍历要删除的集合,这样就不会存在下标和元素错位的问题


错误二:
利用迭代器删除集合元素时,抛出异常java.util.ConcurrentModificationException,
是因为集合迭代器不支持并发操作,边查看,边删除时会产生并发异常

解决方案:
调用集合迭代器自身的remove()方法删除集合元素.
-----------------------------------------------------------------------------

属性类
java.util.Properties

注意:Properties属性类就是一个特殊的Map类,它的KEY和VALUE必须是String类型的

1.获取系统属性
Properties prop = System.getProperties();

//通过系统KEY或者系统属性VALUE
String osName = prop.getProperty("os.name");
System.out.println(osName);
		
String osArch = prop.getProperty("os.arch");
System.out.println(osArch);

String userName = prop.getProperty("user.name");
System.out.println(userName);

...


2.获取定义属性内容
a.创建一个空的属性对象
Properties myProp = new Properties();

b.写一个属性文件,xxx.properties,文件中填写键值对
key = value

例如:
config.properties

KEY=VALUE
KEY=VALUE
...

c.把属性文件转换成IO流
InputStream in = Thread.currentThread().getContextClassLoader()
										.getResourceAsStream("属性文件路径");
										
注意:文件路径从src以下开始!										

d.加载属性文件,load()方法需要处理异常
try{
	myprop.load(in);
}catch(IOException e){
	//...
}

e.通过getProperty(String key)获取value
String value = myprop.getProperty("键");


注意:
a.属性文件中不能出现中文字符,开发工具会自动把中文转换成Unicode编码
b.属性文件中的注释使用:#内容

属性文件的优点:
1.隐藏不需要显示的信息
2.当项目发生迁移时,只需要改动属性文件,即可修改整个项目的配置

一般,我们用属性文件保存一些系统关键信息:
数据库账号,密码,连接池最大空闲数,最大等待时间,最大活动数...
----------------------------------------------------------------------------

泛型

作用:用来约束集合的元素类型,避免类型安全问题

JDK5.0之前,没有泛型概念

List list = new ArrayList();
list.add(100);//OK
list.add(true);//OK
list.add("Tom");//OK

list可以放入任何类型的元素,所以存在类型安全隐患.


JDK5.0时,JCF重写,加入了泛型概念

List<String> list = new ArrayList<String>();
list.add("Tom");//OK
list.add(100);//编译错误,此集合只能存放字符串


JDK7.0时,创建方式得以简化

List<String> list = new ArrayList<>();


泛型的原理:
泛型是编译期概念,不存在运行时类型,也就是说泛型不存在多态

即:
List<String> list1 = new ArrayList<>();
List<Integer> list2 = new ArrayList<>();

这两个集合的编译时类型是不同的,List<String>和List<Integer>,
但是运行时类型都是ArrayList.

list1.getClass() == list2.getClass();//true


提问:
写一个方法,就可以遍历List<Long>,又可以遍历List<Integer>?

利用泛型通配: ?

如何使用:
? extends 类型		指定泛型上限,必须是类型的子类
? super 类型		指定泛型下限,必须是类型的父类
&					指定多个限制并且用&连接


自定义泛型类
-----------------------------------------------------------------------------

枚举(Enum)

定义:是一种类型安全的常量类,所以,也是一种数据类型
在JVM规范中,所有的枚举都自动继承于java.lang.Enum类
要定义一个枚举,使用关键字:enum

定义枚举的语法:
public enum 枚举名{
	//枚举常量

	//方法[可选]
}

如:
public enum Gender{
	FEMALE
	,MALE;
}
//使用
public class Student{
	private String stuno;
	private Gender gender;//性别
	...
	public void setGender(Gender g){
		this.gender = g;
	}
}
//创建学员对象
Student s = new Student("1000",Gender.MALE);


枚举的原理
在JDK5.0之前,要定义一个类型安全的常量:
public class Season{
	public static final Season SPRING = new Season();
	public static final Season SUMMER = new Season();
	public static final Season AUTUMN = new Season();
	public static final Season WINTER = new Season();

	public Season(){...}
}
//使用者:
public class Test{
	public static void test(Season season){
		...
	}
}
//调用者:
Test.test(Season.SPRING);


在JDK5.0之后,使用枚举
public enum Season{
	SPRING
	//相当于public static final Season SPRING = new Season();
	,SUMMER
	,AUTUMN
	,WINTER;
}

java.lang.Enum类
常用方法:
public String name();//返回此枚举的常量名称

通过调用枚举的values()方法,可以得到这个枚举中所有常量的一个数组

枚举的特点:
1.每一个枚举常量都是枚举类的一个实例
2.枚举的构造方法一定是私有的
3.枚举可以有属性,方法和构造方法
4.也可以有抽象方法,如果有抽象方法,则每个枚举常量都必须实
  现这个抽象方法.
