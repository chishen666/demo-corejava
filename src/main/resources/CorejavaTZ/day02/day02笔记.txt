数据(Data)

任何程序都是用来操作(CRUD,增删改查)数据的,在操作数据之前,必须
存储数据.

如何来存储数据?
使用数据类型


注意:
Java是一种强类型的编程语言,定义数据时,都必须添加数据类型
Javascript是一种弱类型的编程语言,定义数据类型时,不需要添加数据类型


Java数据类型分类:
一.基本类型(8种)
		含义			范围											默认值
byte	字节型			-128~127										0
short	短整型			-32768~32767									0
int		整型			-2147483648~2147483647							0
long	长整型			-9223372036854775808~9223372036854775807		0

float	单精度浮点数	1.4E-45~3.4028235E38							0.0
double  双精度浮点数	4.9E-324~1.7976931348623157E308					0.0

char	字符型			'A','a','9','我'...								'\u0000'
boolean 布尔类型		true/false										false


注意:
1.在Java中,随意写一个整数,默认是int类型,随意写一个小数,默认是double类型

2.字符型可以来存放很多的内容
  char c = 'A';
  char c = 'a';
  char c = '你';
  char c = '\u597d';//unicode编码
  char c = '\n';
  char c = '\t';

  运行,cmd,输入native2ascii,进入转换进程,ctrl + c退出.
  
3.字符型还可以进行运算,字符和整数进行运算,结果是整数


二.对象类型(无数种)

1.内置对象类型
  String,Math,Random,Scanner,System...
  
2.我们自己写的任何类  
--------------------------------------------------------------------------------

Java特殊符号

\n		换行,光标移动到下一行的起始位置

\r		回车,光标移动到当前行的起始位置

\t		隔开一个tab距离

\b		退格

\\		\

\"		"

\'		'
--------------------------------------------------------------------------------

Java数据类型的转换

1.自动类型转换(隐式类型转换)

  从小范围数据类型往大范围数据类型转换,一定可以存储,所以系统自动完成


2.强制类型转换
 
  从大范围数据类型往小范围数据类型转换,可能无法存储,所以需要程序员对
  数据类型进行强制转换处理

  强制类型转换可能损失精度

  语法:
  转换后的类型  变量名 = (转换后的类型)需要转换的值;
  float         f      = (float)       3.14        ;


注意:
a.long,float,double有以下简便强制类型转换的方法
  L/l,F/f,D/d
  
  例如:
  float f = 3.14F;

b.Java中数据类型一般可以互转,但是也有相互不能转换的情况
  
  例如:
  boolean与数字类型

c.Java中两种数据类型进行运算,结果是偏向数据类型较大的一方.
  字符串与某些数据类型进行运算,结果是String.
  数字和字符进行运算,结果是数字.
------------------------------------------------------------------------

变量

所有程序都是由变量构成的.

语法:
数据类型 变量名 = 值;


变量名的命名规范:
规范与类名相同,企业命名惯例:小写字母开头,以后每个单词首字母大写(同方法),

例外情况:常量,常量必须所有都是大写字母,中间用_隔开

final int ROW_EACH_PAGE = 10;//常量一旦确定,无法改变

常量的作用:提高代码的可读性


定义方式:
1.字面量赋值
  字面量就是指数据本身,3,3.14,"张三"
  
  //创建变量的同时直接赋值
  int i = 3;//把字面量3赋值给int数据类型的变量i
  String s = "张三";

  //先创建变量,然后再赋值
  int j;
  j = 3;				

  注意:初始化--创建变量后第一次赋值


2.通过方法赋值
  int i = sc.nextInt();
  int j = Math.max(3,4);


3.通过表达式赋值
  表达式就是由变量和运算符所组成的合法的语句
  int a = 3;
  int b = 4;
  int i = a + b;


4.特殊赋值方式
  int a,b,c;
  a = b = c = 1;//链式赋值

  int a = 3, b = 4, c = 5;
  
  
注意:
同一个{}中不允许定义同名的变量
变量的使用范围是在定义它的{}之内,超出这个范围,该变量就失效了

------------------------------------------------------------------------

Java运算符

+	1.算数运算
    2.字符串连接
    
    当+两边都是数字类型,则数学加,只要出现一个字符串,则连接

-	减法

*	乘法

/	除法

%	求模,取余数


练习:
请您输入一个三位整数,然后分别打印个十百位分别是多少?
见Exercise1


=	赋值

==	等于
    if(score == 100){
    	System.out.println("满分");
    }

!=	不等于


<,>,<=,>=	返回类型boolean

System.out.println(2 < 3);//true
System.out.println(4 < 3);//false


+=,-=,*=,/=,%=,^=,<<=,>>=...

int i = 3;
//i = i + 1;

改写成:i += 1;

此写法虽然可以避免类型转换问题,但是结果还是不能保证正确


++	自增	前++/后++
--	自减	前--/后--

结论:后++是先赋值,后自增
     前++是先自增,后赋值

-----------------------------------------------------------------------------------------------

&	按位与,同0为0,同1为1,不同为0

	111
&	010
-------
    010


|	按位或,同0为0,同1为1,不同为1

	111
|	010
-------
    111

^	按位异或,相同为0,不同为1

	111
^	010
-------
    101
    
    
    注意:一般作为简单的加密处理
    
    一个数,连续异或同一个数两次,结果是它本身!
    
    3 ^ 7 ^ 7 = 3
   

~	按位取反,0变1,1变0
    ~010
    101
    
    注意:~x = -(x + 1)
    
          原码是指正数二进制
          补码是指负数的二进制,在计算机中,负数的二进制就是用补码来存放的
          所以:
          补码 = 原码取反 + 1;
    
    
32位系统:
5的存储:00000000 00000000 00000000 00000101
-3的存储:11111111 11111111 11111111 11111101(前面所有的1都是符号位)


64位系统:32位前面再加32个1或者32个0


练习
-7的二进制?

7的二进制:00000000 00000000 00000000 00000111
按位取反 :11111111 11111111 11111111 11111000
+1		 :11111111 11111111 11111111 11111001
  

二进制,由0和1组成,每逢2,进1

二进制-->十进制:
从右往左依次标位,标记从0开始,然后依次累加位置数乘以2的标记次方

标记位:210
二进制:111
1 * 2 ^ 2 + 1 * 2 ^ 1 + 1 * 2 ^ 0 = 7

十进制-->二进制:连续除以2,倒取余数


八进制,由0-7组成,每逢8进1
八进制:26
十进制:2 * 8 ^ 1 + 6 * 8 ^ 0 = 22

十六进制,以0x开头,由0-9,a-f组成,每逢16进1


练习:
0x2e3a的二进制是?

0010 1110 0011 1010

方法:
1.16 -> 10 ->2
2.16进制每一位转换成二进制即可


<<,>>		位移运算符

1110	14
0111	7

注意:位移运算时所有进制都含有的特性

数字向左移动一位,相当于十进制数字乘以一次进制数
数字向右移动一位,相当于十进制数字除以一次进制数


面试题:
请你以最快的方式计算2的3次方法?

System.out.println(Math.pow(2,3));//ERROR

System.out.println(2 << 2);//OK

结论:位移运算是所有运算中效率最高的!

------------------------------------------------------------------------

逻辑运算符

&&(&,非短路逻辑与)		短路逻辑与
同真为真,同假为假,只要有一个是假,结果就是假


||(|,非短路逻辑或)		短路逻辑或
同真为真,同假为假,只要有一个是真,结果就是真


短路与非短路的区别:
A && B,如果A是假,则B就不会执行
A || B,如果A是真,则B就不会执行

A & B,无论A是真还是假,B始终会被执行
A | B,无论A是真还是假,B始终会被执行

作用:短路型逻辑运算符可以大大提高程序的性能,我们在使用时,应该考虑把
     哪一个条件放在符号之前,使用&&,应该把两个条件中可能出现false几率
     更大的一方写在前面,使用||,应该把两个条件中可能出现true几率更大
     的一方写在前面,这么可以提高程序的性能.


!						逻辑非
boolean bool = true;
bool = false;
System.out.println(!bool);//true


三目运算符
条件 ? 表达式1 : 表达式2

当条件为true时,执行表达式1,否则执行表达式2

完全等价于:
if(条件){
	//表达式1;
}else{
	//表达式2;
}

例如:
int score = 89;
System.out.println(score > 60 ? "及格" : "不及格");
