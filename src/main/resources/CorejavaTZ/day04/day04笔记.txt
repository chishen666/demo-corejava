MyEclipse快捷键

ctrl + s			保存
ctrl + d			删除一整行
ctrl + /			添加/取消单行注释
ctrl + f			查找/替换
ctrl + m			最大化当前视窗
ctrl + 1			弹出信息(警告,错误),并且列出解决方案
ctrl + z			撤销,还原

ctrl + shift + /	添加多行注释
ctrl + shift + \	取消多行注释
ctrl + shift + r	资源搜索(搜索项目中的类)
ctrl + shift + f	格式化

alt + 上下			把选中的代码移动到指定位置
alt + 左右			在打开的类中来回切换	
shift + 上下左右	选中代码

ctrl + alt + 上下	复制当前行到原内容上面/下面

alt + shift + r		修改同一个变量名

注意:每行代码基本都要按快捷键
alt + /				智能补齐助手

syso + 智能补齐助手 = 输出语句
main + 智能补齐助手 = main方法

----------------------------------------------------------------------------
方法的定义

方法(Method)是一段功能代码,用来完成某一种业务功能,方法的出现使得我们可以
在一个程序或者多个程序中对某一段代码进行复用.

语法:
修饰符 返回类型 方法名 ([参数列表]) [可抛出的异常]{
	//方法体;
}

public static void main(String[] args){

}


注意:
1.静态方法调用一个非静态方法必须创建对象,然后用对象名去调用
  静态方法可以直接调用静态方法,无需创建对象
2.非静态方法可以直接调用任何类型的方法

如果被相互调用的静态方法在同一个类,则直接写方法名即可,如果不
在同一个类内部,则必须使用类名.方法名调用


修饰符

访问控制修饰符:
public/protected/[]/private

static/final/abstract...


方法名:方法的名称,必须符合命名规范


返回类型

是指调用该方法时可以获取到的内容信息.

分为两大类:
1.void	表示没有返回值
 

2.任何数据类型:基本类型或者对象类型

  在方法中使用return关键字来返回结果,返回的数据类型必须<=方法的返回类型

//调用此方法可以获取一个int类型的值
public int add(){
	int i = 3;
	int j = 4;
	return i + j;//返回结果
}

//调用此方法可以获取一个String字符串
public String getMessage(){

}

//调用此方法可以获取一本图书对象
public Book getBooks(){

}

注意:
如果方法的返回类型不是void,则该方法一定有return语句
如果方法中有return语句,则该方法可能是void的

注意:
void表示没有返回值,但是这个方法的返回类型是void


在定义方法返回类型时,如果该方法是用来打印或者设置等功能,则定义成void,
如果调用该方法想要获取一定的数据,而该不关心该数据的进一步处理,则定义成
该数据的相应类型.


参数列表:方法进行运行时所需要的"原料"

练习:
public Student[] addStudent(Student student){}

public User login(String username,String password){}

public void insertElement(String 数列,int pos,int 值){}
---------------------------------------------------------------------------

递归算法

概念:在方法体内部自己调用自己的过程叫做递归

优点:
通过极少量的代码完成一个重复多次,并且有规律的运算.

缺点:
极其消耗系统资源,性能非常低下,
每次递归都会保留中间值,存储在内存中,消耗内存资源.

例如:
阶乘
斐波那契数列	1	1	2	3	5	8	13	21	34	55...
汉诺塔			计算最少移动步骤
杨辉三角

注意:
1.必须是自己调用自己

2.递归一定要指定递归出口,也就是递归结束的条件,则
  抛出堆栈溢出错误:java.lang.StackOverflowError;

---------------------------------------------------------------------------

数组(Array)
定义:由一组相同数据类型并且共享变量名的元素所组成,是一块
     连续的空间

作用:它是一种容器,可以用来存放一组相同类型的字面量或变量
     所以它可以存储和维护一组相同类型的数据

1.数组的定义
     类型[] 数组名 = new 类型[length];
或者
     类型 数组名[] = new 类型[length];

如:定义长度为10的整型数组
   int[] arr = new int[10];

   定义一个长度为5的自定义元素类型的数组
   Computer[] cp = new Computer[5];

也可以先定义数组,在使用之前再创建
int[] arr;
arr = new int[10];

注意点:
a.数组是对象类型,但是它里面的元素可以是任意类型
  int[] arr = new int[3];
  这个数组的类型是对象类型,里面的元素是基本类型
  arr的类型是int[]

b.数组的长度必须要有,且一旦确定,是不可以改变的
  获取数组元素个数:数组名.length

c.数组元素的类型,决定了存放在其中的变量/字面量的类型

注意:创建数组的两大必不可少的条件:元素类型,数组长度

d.数组元素共享变量名,所以,可以通过下标来访问数组元素,
  下标是从0开始的,到length - 1结束.

  通过下标访问数组元素时,如果超过下标范围,则会出现
  java.lang.ArrayIndexOutOfBoundsException
  数组下标越界异常.

  如:
  int[] arr = new int[10];
  System.out.println(arr[0]);
  //访问下标是0的元素,也就是第一个元素
  ...
  System.out.println(arr[10]);//出现下标越界异常

e.创建数组的时候如果没有赋值,那么系统会给元素赋值默认值
  整数类型	0
  小数类型	0.0
  布尔类型	false
  对象类型	null


2.数组赋值的方式
a.定义数组的时候直接赋值
  int[] arr4 = {2,4,5,7,9};
  int[] arr4 = new int[]{2,4,5,7,9};
  //两个写法完全等价,new int[]中不能写长度

b.通过下标来给元素一一赋值
c.通过循环来给数组元素赋值
d.通过Arrays.fill()方法来赋值
  java.util.Arrays,数组操作工具类,提供操作数组的基本方法

  Arrays.fill(数组名,值);
  Arrays.fill(数组名,起始下标,结束下标,值);//结束下标不包含
  //如果存入不匹配的数据类型,会抛出异常:
    java.lang.ArrayStoreException


3.数组的遍历(迭代)
1.普通for循环
  只能遍历有序的

2.增强for循环
  语法:
  for(数组元素的类型 变量名 : 数组名){
	System.out.println(变量名);
  }
  注:
  JDK1.5之后提供的遍历操作,它可以实现遍历无序的集合
  增强for循环是只读型,不能写入

3.Arrays.toString(数组名);
  可以按照一种规范格式来打印数组元素
  [元素1, 元素2, .....元素N]

4.通过下标,一一把元素打印出来

5.自定义方法来输出数组元素
---------------------------------------------------------

数组的长度一旦确定,无法改,所以,对数组元素的增删操作我们必须使用
其他的方式--数组的拷贝方法

1.Arrays.copyOf(原数组名字,新长度)
  注意:内部就是调用System.arraycopy()

2.System类中的
  public static void arraycopy(
  Object src,int srcPos,Object dest,int destPos,int length)

此方法可以用来做数组之间元素的拷贝,各参数意义如下:
Object src	指原数组名
int srcPos	从原数组的第几个下标位置开始拷贝
Object dest	指目标数组(新数组)
int destPos	拷贝到目标数组的第几个下标位置
int length	拷贝的长度

注:
srcPos + length 决不能超过src数组的长度
destPos + length 决不能超过dest数组的长度
否则出现数组下标越界异常
---------------------------------------------------------

数组的排序
插入排序
冒泡排序
选择排序
快速排序
希尔排序
void Arrays.sort(数组名);
---------------------------------------------------------

数组的应用:
数组作为一种容器,常见的业务有(增,删,改,查)
获取某一个元素的下标位置,求最值,排序,插入元素,删除元素
---------------------------------------------------------

二维数组
定义:
一维数组的数组,也就是说二维数组中的每一个元素都是一维数组

语法:
类型[][] 数组名 = new 类型[rows][cols];
或者
类型 数组名[][] = new 类型[rows][cols];

注:rows必须要有,cols可以省略

如:定义一个3行3列的二维整型数组
   int[][] arr = new int[3][3];

初始化:
   arr[0] = new int[]{1,2,3};
   arr[1] = new int[]{2,4,6};
   arr[2] = new int[]{10,20,30};
或者
   int[][] arr = {{1,2,3},{2,4,6},{10,20,30}};

采用循环来初始化(把二维数组arr的每一个元素赋值为1)
for(int i = 0;i < arr.length;i++){
	for(int j = 0;j < arr[i].length;j++){
		arr[i][j] = 1;
	}
}

不规则的二维数组
int[][] arr = new int[3][];
arr[0] = new int[]{1};
arr[1] = new int[]{1,2,1};
arr[2] = new int[]{1,2,3,2,1};

注:
如果在定义二维数组的时候,没有指定列的长度,则下面初始化
数组元素的时候,不能直接用{}来赋值,而应该通过new int[]{}
来赋值

二维数组通常的业务
坐标计算
所有规则方格的游戏
如:扫雷,五子棋,象棋...
---------------------------------------------------------

方法参数的传递:

参数列表是一种形参,也是局部变量,它的生命周期仅存在于当前
方法体中

实参,也就是实际参数,是指方法调用者(使用者)传递给方法的参数

有如下方法:
public class CommandCalc {
	public int add(int i,int j){
		//i,j是形参
		return i + j;
	}
}

调用者:
CommandCalc cc = new CommandCalc();
int a = 3;
int b = 7;
cc.add(a,b);
//a,b就是实参

在Java当中,参数的传递有两种方式:
值传递和引用传递

a.如果参数类型是基本类型,则采用值传递,也就是值本身
b.如果参数类型是对象类型,则采用引用传递,也就是传地址

当方法发生调用时,首先分配方法的空间,然后把方法的实参值
拷贝一份给形参,接下来设置方法的返回点再下来就是程序执行
被调用的方法,当被调用的方法执行完毕的时候,回到方法的返回
点也就是程序回到调用者处继续执行.

public void add(int a){
	a++;
}
调用者:
int i = 100;
add(i);
//请问此处i的值是多少?
 

public void add(int[] a){
	for(int i = 0;i < a.length;i++){
		a[i] = a[i] + 1;//把每个元素都加1
		//相当于 a[i] += 1;
	}
}
调用者:
int[] arr = {1,5,10};
add(arr);
//请问,此处arr数组中的元素分别是多少?
