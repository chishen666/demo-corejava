单元测试

keep the bar green,to keep the code clean


企业测试的分类:
黑盒测试,针对程序或者物件的功能测试,侧重于功能是否可以使用,不需要涉及到代码.

白盒测试,针对程序或者物件内部功能以及代码的测试,要求较高,如果测试时存在问题,
则要求具有一定的修复能力.


注意:
一般我们可以使用main()方法来测试,但是有很多缺点:
1.main()方法测试不能同时运行多个代码
2.main()方法测试很多情况下需要人为观察输出结果是否正确
3.测试时,限制不够多,参数不够具体,得到的信息不够全面


企业中最常规的测试是使用JUnit4进行测试.


单元测试的步骤:
1.编写完成要测试的类

2.准备测试环境
  a.导入单元测试JAR包
    a-1.右击项目,创建一个文件夹,命名为lib,专门用来存放项目JAR包
    a-2.右击需要导入的JAR包,build path -> add to build path.
    
    注意:
    自己制作JAR包
    选中想要的包->右击Export-> Java ->JAR file -> 生成文件的路径 -> 完成
    
     
  b.在项目中搭建测试包,com.xxx.test
    b-1.写一个测试类,测试类的名字:Test + 要测试的类名/要测试的类名 + Test
    b-2.写一个测试方法,命名为:test + 要测试的方法名,返回类型void,参数列表空,
        在测试方法上加上@Test注解,用来驱动单元测试

3.进行测试
  右击测试方法名,run as -> JUnit Test
  
  通过信息提示以及红条绿条判断测试结果.        
-------------------------------------------------------------------------------------------------

软件的架构

C/S -- Client/Server,基于客户端程序和服务器的软件架构
例如:QQ,有道词典,新浪微博...

B/S -- Browser/Server,基于浏览器和服务器的软件架构
例如:电商网页版,微信网页版,网页游戏,云服务器...


C/S优点:客户端彼此独立,安全性相对较高
C/S缺点:需要开发客户端和服务端两套软件系统
		一旦客户端升级,则必须所有客户端都升级才能使用新功能,费事费力

B/S优点:不需要开发客户端,直接用浏览器访问同步资源.服务器一旦更新,所有
        浏览器立即可以查看新内容.
B/S缺点:安全性相对较低
        对其他条件要求比较高(服务器性能,网速...)

-------------------------------------------------------------------------------------------------

Java注解(Annotation)

@Override			检测方法是否是重写方法

作用域:只能是方法!



@Deprecated			表示内容已经过时

作用域:CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE


注意:注解可以使用的位置是由@Target注解来控制的,如果@Target注解没有写,则
     默认是全局都可以使用
     
     
     
@Supresswarings()   抑制代码中的警告信息

注意:它需要搭配不同的字符串来达到抑制目的

如:"unused", "deprecation" ,"rawtypes","resource"

"all"	表示抑制所有的警告信息


作用域:TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE
