
在JAVA中提供了两种抽象数据的类型,
分别是抽象类(abstract class)和接口(interface)
----------------------------------------------------------

抽象类(abstract class)
关键字:abstract,也是修饰符
定义:
public abstract class Shape{
	//属性
	private String type;
	...
	//业务方法
	//抽象方法
	public abstract double girth();
	public abstract double area();
}

抽象方法:
在方法前面加上abstract关键字,就成了抽象方法.

注:抽象方法是没有实现,直接用分号(;)结束

它的目的就是为了让子类来重写了,因为父类没有办法去实现

抽象类的特点:
1.抽象类不能被实例化
2.抽象类中可以没有抽象方法,但是如果一个类中有抽象方法,
  那么它一定是抽象类
3.如果子类继承了抽象父类,那么要实现父类中所有的抽象方法,
  除非这个子类也是抽象类
4.抽象类中可以有构造方法

抽象类是不能被实例化的,那么我们为什么要定义抽象类呢?
抽象类"天生"是用来被继承的,所以说abstract和final不能同时
修饰一个类.
----------------------------------------------------------

抽象类的应用之模板设计模式(Template Pattern)

问题域:
如何在应用系统中定义一个相对固定的业务流程,具体的实现细节
延迟到子类中去实现.

应用场景:
适合用来定制"顶级业务流程",并且不关心具体的实现细节

解决方案:
1.定义一个抽象的父类,在这个父类中设计好抽象方法,这些方法
  由子类去实现
2.在这个抽象父类中,还要定义一个具体的"执行业务流程"的模板
  方法,在这个方法中去调用其他的抽象方法.

如:
要定制一个央视小品的演出流程:
要先报幕,然后叙事,接着煽情,最后结束,以上内容都要延迟到
具体子类中去实现.

CODE:
public abstract class 小品 {
	//定义抽象方法
	public abstract void 报幕();
	public abstract void 叙事();
	public abstract void 煽情();
	public abstract void 结束();
	//定义一个具体的执行业务流程的模板方法
	public final void topMethod(){
		...
		报幕();
		...
		叙事();
		...
		煽情();
		...
		结束();
	}
}

//具体的实现者
public class 冯巩 extends 小品 {
	...
	public void 报幕(){}
	public void 叙事(){}
	public void 煽情(){}
	public void 结束(){}
	...
}
//测试类
小品 对象名 = new 冯巩();
对象名.topMethod();

---------------------------------------------------------

修饰符使用注意点:

1.修饰符之间是没有顺序
  如:
  public static void main(String[] args) {}
  static public void main(String[] args) {}

  小结:访问修饰符
  public/protected/[default]/private
  static/final/abstract


2.不能混用的修饰符
a.abstract和final不能同时使用
  原因:abstract天生是用来被继承和重写的,而final表示不能被继承/重写
 
b.static和abstract不能同时使用
  原因:static是静态的,没有多态,而abstract就是为了多态

c.private和默认修饰符(父子类不同包时)不能与abstract同时使用
  原因:此两个修饰符修饰的方法,子类是不能访问的,子类就
       不能重写父类的方法,这样就与abstract关键字的原则
       相违背了.
--------------------------------------------------------------


接口(Interface)
关键字:interface

如何定义接口:
public interface 接口名 {
	//属性,都是公开静态属性(常量)
	//方法,都是公开的抽象方法
}

接口也是类,它编程完成后,也是一个.class文件

它的特点:
1.接口中没有构造方法

2.接口的所有属性都是公开的,静态的,常量(public static final)
  public static final int EAST = 1;
  可以简写成:
  int EAST = 1;

3.接口的所有方法都是公开的,抽象方法(public abstract)
  public abstract void move(int direction);
  可以简写成:
  void move(int direction);

4.与抽象类一样,接口不能被实例化对象

5.支持多重继承,也就是说一个接口可以继承多个接口,多个接口
  之间用用逗号(,)隔开

6.一个类可以实现多个接口,多个接口之间用逗号(,)隔开
  如果一个类实现了一个接口,那么必须实现接口中所有的抽象方法
  除非这个类是抽象类


接口的命名规范:
1)以I开头,如:IHello,IMove,IRead,ICar等
2)以able结尾,如:Runable,Moveable,Readable等

注:
以上两种命名方式只是推荐,只要是合法的标示符都可以命名接口

如:
public interface Movable{
	//属性
	int NORTH = 1;
	//相当于public static final int NORTH = 1;

	//方法
	int getSpeed();
	//相当于public abstract int getSpeed();

	void move(int direction);
}

实现接口
关键字:implements

语法:
public class 类名 implements 接口列表 {
	
}

注:在JAVA中,一个类可以实现多个接口,用,隔开
   如果这个类不是抽象类,则必须实现接口中所有的方法

对于接口而言,一个接口可以继承多个接口(多重继承),那么子
接口就有了父接口所有的属性和方法.

如:
public interface IA{
	void method_a();
}
public interface IB{
	void method_b();
}
public interface IC extends IA,IB{
	void method_c();
}
//写一个类实现IC
public class Cimpl implements IC {
	//要实现IC自己的方法,包含IC从父接口继承而来的方法
	public void method_a(){}
	public void method_b(){}
	public void method_c(){}
}
public class ABimpl implements IA,IB{
	public void method_a(){}
	public void method_b(){}
}

面向接口编程:
1.对象的编译时类型写成接口
2.方法的参数列表写成接口
3.方法的返回类型写成接口
------------------------------------------------------------------

接口的分类:
1.常量接口
  特点:只有属性,没有方法
   
  如:
  public interface IConstants{
	int ROWS = 20;
	int COLS = 10;

	String msg = "Hello,World";
  }

  //实现者
  public class Test1 implements IConstants{
	//由于被实现的接口没有方法,所以,无需实现任何方法
  }

  注意: 从JDK 5.0以后,都是用枚举来代替常量接口


2.标记接口
  特点:既没有属性,也没有方法的接口

  作用:在系统中,可以instanceof运算符来判断某个实例是否
       实现了某个标记接口,从而做出不同的处理策略.

如:
public interface Flyable{
	
}

//实现类:
public class Bird extends Animals implements Flyable{
	...
}
public class Eagle extends Animals implements Flyable{
	...
}
public class Cat extends Animals{
	...
}
//使用者:
如果在程序中要区别Bird,Eagle,Cat,那么就可以利用标记接口


实际上,标记接口很重要
java.io.Serializable就是一个标记接口
此标记接口用来做对象持久化,JVM针对此接口做类型判断,
以决定此对象是否符合持久化的要求.
---------------------------------------------------------------------------

抽象类和接口的异同:

相同点:
1.都是抽象数据类型
2.都不能被实例化,只能做为编译时类型

不同点:
1.抽象类中可以有实现的方法,接口中不可以
2.抽象类中可以有构造方法,接口中不可以
3.抽象类只能单继承,但是接口可以多继承
4.一个类只能继承一个抽象类,但是可以实现多个接口


注意:
名称性质定义成抽象父类,动词性质定义成接口!

---------------------------------------------------------

软件设计的原则
1.高内聚
  内聚是指模块之间或者对象之间独立完成本职业务的能力
  模块/对象设计的越好,内聚力越高.

2.低耦合
  耦合是指模块或者对象之间相互依赖的程度
  耦合度越高,说明依赖程度越高,那么软件的设计就越差

如何解耦?
关键是抽象
关系是起始于抽象,结束于抽象.



