JAVA SE API高级应用

Java集合框架(2)
JavaIO流(2)
Java Annotation,Java注解
Java Reflection,Java反射技术
XML
---------------------------------------------------------------------------

JAVA集合框架(Java Collection Framework)
由sun公司提供的一组操作数据集合的API
由一系列的接口和实现类,工具类所组成,
它是作为一种"容器"对象而存在的,我们可以理解为是数组的拓展.

包:java.util

JCF结构
Collection(I)
	|- List(I)
		\-ArrayList(C)
		\-LinkedList(C)
		\-Vector(C)

	|- Set(I)
		\-HashSet(C)
		\-SortedSet(I)
			\-TreeSet(C)

List的特点:有序,可重复
Set的特点:无序,不可重复
SortedSet是Set的一个分支,它的特点:,有序,但是不可重复

Map(I)
	\-HashMap(C)
	\-HashTable(C)
	\-SortedMap(I)
		\-TreeMap(C)

Map的特点:只针对KEY值无序,不可重复
SortedMap是Map的一个分支,它的特点是针对KEY值排序,但是不可重复

注:
Collection中存放的是值本身,而Map中是以KEY-VALUE的形式存在的
(键-值对)
----------------------------------------------------------
Collection中的公共方法:
add(Object obj);//添加对象到集合中
remove(Object obj);//从集合中移除对象
size();//得到集合中的元素个数
isEmpty();//判断集合是否为空
clear();//清空集合元素
toArray();//得到集合元素数组

Iterator iterator();//返回集合的迭代器


List(有序,可重复)
实现类:
1)ArrayList
  底层实现是动态数组,查询效率高,因为数组可以通过下标去访问,
  但是,删除和插入的效率低下,因为要做数组元素的移动.

2)LinkdedList
  底层实现是双向链表,它的插入和删除元素的效率高,因为只需要
  对相关的两个节点进行操作即可,不影响其他节点.
  但是,查询效率低下,因为都需要从根节点依次向下去查询.

3)Vector
  与ArrayList是一样的,只有一点不同:
  Vector所有方法都是线程同步的方法,它是多线程安全的,所以也
  叫重量级集合容器.


Set(无序,不可重复)
实现类:
1.HashSet
  常用方法与Collection一样

  HashSet的底层实现是:散列表(Hash表)
 
  HashSet是一个没有value的HashMap

  HashSet是如何来实现元素无序且不可重复的?
  答:
  当第一个元素添加到Set中时,会调用这个对象的hashCode()方法,得到
  一个散列值,根据这个值来决定该元素存放到集合中的哪一个位置.
  当第二个元素添加时,又会调用这个对象的hashCode()得到散列值,
  a.如果该散列值与之前不同,说明这两个对象不是相同的对象,则直接把
    新元素添加到集合中
  b.如果该散列值与之前相同,此时还不能说明该两个对象是相同对象,系统
    会继续调用这个对象的equals()方法
    b-1.如果equals()方法返回true,则说明这两个对象是相同的对象,则该
        元素就不会被添加到集合中了.
    b-2.如果equals()方法返回false,则说明这两个对象是不同对象,只不过
        它们的哈希值相同,则这个元素应该被添加到集合中,但是由于该哈希值
        对应的位置已经被占用了,所以,系统会根据自己的算法来安排存放的位置.

2.SortedSet接口
     特点:排序,不可重复
     实现类:TreeSet
     底层是采用平衡树(二叉树)算法来实现的
     
     
     要实现排序,必须要依赖排序接口
     JCF中提供了两种方式:
		方式一:java.lang.Comparable接口 -- 可比较接口
		方法:
		public int compareTo(Object other)
		//比较当前对象和other
	
		方式二:java.util.Comparator接口 -- 比较器接口
		方法:
		public int compare(Object o1,Object o2)
		//比较o1和o2对象


3.TreeSet的原理
1)如果不是Comparator做为参数来构造,
  则此类将利用Comparable接口来实现排序和不重复

  会要求你添加到TreeSet中的元素必须实现Comparable接口,
  从第二个元素开始,就会回调添加入元素的compareTo方法,
  以之前加入的元素作为参数,来决定大小.

2)如果是以Comparator为参数来构造,则就会利用Comparator来
  实现排序和不重复.
  此时,就不再需要元素实现Comparable接口,而是通过
  Comparator比较器比较排序.
  从第二个元素开始,就会回调Comparator的compare方法,
  传入两个对象,从而决定大小.
  

排序方式的优先级:
先找Comparator,再找Comparable,如果都不存在,直接抛出异常:
java.lang.ClassCastException 
  
---------------------------------------------------------

Map特性:
Map是采用键-值对来存储数据的集合

常用方法:
put(Object key,Object value);//把key/value加入map中
get(Object key)//根据key来得到value值
isEmpty();
size();
clear();
containsKey(Object key);//判断当前map是否含有key
containsValue(Object value);//判断当前map是否含有value


//迭代方法(把Map转换成Set,再迭代)
public Set keySet();//把Map中的key拿出来放入Set,并且返回

public Set<Map.Entry> entrySet();
//把Map中的key和value封装成一个Map.Entry对象,并且放入Set,并返回
  
public Collection values();
//把Map中的全部的value拿出来放入Collection,并且返回


实现类:
1)HashMap
  构造方法:
  public HashMap(){}		//构造空的HashMap对象
  public HashMap(Map map){}	//根据另一个Map的内容来构 造新的Map

HashMap的底层也是散列表(Hash表),但是它只针对做为Key的对象
采用散列算法,从而决定存放位置以及是否重复.
所以对于HashMap来说,Key相同,则代表对象是重复的,因此,我们
只要保证key不同就可以了.

一般而已,我们可以直接采用String类型或者包装类型做为Map的
Key类型,而自定义类型做为Value类型.

HashMap的特点(和HashSet是一样的)
a.无序
b.不可重复(key不可重复)


2)TreeMap与TreeSet的关系
  TreeSet中组合了TreeMap,使用它key来存放值,而value全部
  使用一个对象(Object)填充.
---------------------------------------------------------

工具类:java.util.Collections
本类提供了JCF中常见的操作,都是静态方法

Collections的常用方法:
public static void sort(List list);//按照自然顺序排序
public static void sort(List list,Comparator c);//按照比较器规则排序
public static void shuffle(List list);//随机打乱顺序
public static void reverse(List list);//反转顺序

---------------------------------------------------------
Collection和Collections的区别

Collection是一个接口,有List和Set两个接口,分别有各自的实现类.
Collecitons是一个工具类,提供集合框架操作的一些方法
如:排序,打乱等.
